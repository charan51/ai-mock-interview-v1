name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify EC2 Instance State
      run: |
        echo "Checking EC2 instance state..."
        INSTANCE_STATE=$(aws ec2 describe-instances \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --query "Reservations[0].Instances[0].State.Name" \
          --output text)
        echo "Instance state: $INSTANCE_STATE"
        if [ "$INSTANCE_STATE" != "running" ]; then
          echo "Error: EC2 instance is not in a running state. Current state: $INSTANCE_STATE"
          exit 1
        fi

    - name: Check SSM Managed Instance
      run: |
        echo "Checking if instance is managed by SSM..."
        INSTANCE_STATUS=$(aws ssm describe-instance-information \
          --filters "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --query "InstanceInformationList[0].PingStatus" \
          --output text)
        echo "SSM Ping Status: $INSTANCE_STATUS"
        if [ "$INSTANCE_STATUS" != "Online" ]; then
          echo "Error: EC2 instance is not managed by SSM or is offline. Ping Status: $INSTANCE_STATUS"
          exit 1
        fi
        AGENT_VERSION=$(aws ssm describe-instance-information \
          --filters "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --query "InstanceInformationList[0].AgentVersion" \
          --output text)
        echo "SSM Agent Version: $AGENT_VERSION"

    - name: Copy docker-compose.yml to EC2
      run: |
        # Encode docker-compose.yml as base64 without line wrapping
        BASE64_ENCODED=$(cat docker-compose.yml | base64 -w 0)
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["mkdir -p /home/ec2-user/ai-mock-interview-v1","echo \"'"$BASE64_ENCODED"'\" | base64 -d > /home/ec2-user/ai-mock-interview-v1/docker-compose.yml"]}' \
          --query "Command.CommandId" \
          --output text)

        # Wait for the command to complete
        echo "Waiting for command $COMMAND_ID to complete..."
        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ] || [ "$STATUS" == "Pending" ]; do
          sleep 5
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Status" \
            --output text)
          echo "Command status: $STATUS"
        done

        # Check the command output
        OUTPUT=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardOutputContent" \
          --output text)
        ERROR=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardErrorContent" \
          --output text)

        echo "Command Output:"
        echo "$OUTPUT"
        if [ -n "$ERROR" ]; then
          echo "Command Error:"
          echo "$ERROR"
          exit 1
        fi

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Copy .env to EC2
      run: |
        # Verify .env file exists locally
        if [ ! -f .env ]; then
          echo "Error: .env file not found in the repository"
          exit 1
        fi
        echo "Contents of .env file:"
        cat .env

        # Encode .env as base64 without line wrapping
        BASE64_ENCODED=$(cat .env | base64 -w 0)
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["echo \"'"$BASE64_ENCODED"'\" | base64 -d > /home/ec2-user/ai-mock-interview-v1/.env","cat /home/ec2-user/ai-mock-interview-v1/.env"]}' \
          --query "Command.CommandId" \
          --output text)

        # Wait for the command to complete
        echo "Waiting for command $COMMAND_ID to complete..."
        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ] || [ "$STATUS" == "Pending" ]; do
          sleep 5
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Status" \
            --output text)
          echo "Command status: $STATUS"
        done

        # Check the command output
        OUTPUT=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardOutputContent" \
          --output text)
        ERROR=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardErrorContent" \
          --output text)

        echo "Command Output:"
        echo "$OUTPUT"
        if [ -n "$ERROR" ]; then
          echo "Command Error:"
          echo "$ERROR"
          exit 1
        fi

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Install Dependencies on EC2
      run: |
        # Install git, docker, and docker-compose on the EC2 instance
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["sudo yum install -y git","sudo yum install -y docker","sudo systemctl start docker","sudo systemctl enable docker","sudo usermod -aG docker ec2-user","if ! command -v docker-compose &> /dev/null; then sudo curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose; fi","ls -l /usr/local/bin/docker-compose","docker-compose --version || echo \"docker-compose not installed\""]}' \
          --query "Command.CommandId" \
          --output text)

        # Wait for the command to complete
        echo "Waiting for command $COMMAND_ID to complete..."
        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ] || [ "$STATUS" == "Pending" ]; do
          sleep 5
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Status" \
            --output text)
          echo "Command status: $STATUS"
        done

        # Check the command output
        OUTPUT=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardOutputContent" \
          --output text)
        ERROR=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardErrorContent" \
          --output text)

        echo "Command Output:"
        echo "$OUTPUT"
        if [ -n "$ERROR" ]; then
          echo "Command Error:"
          echo "$ERROR"
          exit 1
        fi

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Verify Docker Images
      run: |
        # Verify the Docker images can be pulled
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["docker pull cvcharanraj/ai-mock-interview-backend:latest","docker pull cvcharanraj/ai-mock-interview-frontend:latest"]}' \
          --query "Command.CommandId" \
          --output text)

        # Wait for the command to complete
        echo "Waiting for command $COMMAND_ID to complete..."
        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ] || [ "$STATUS" == "Pending" ]; do
          sleep 5
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Status" \
            --output text)
          echo "Command status: $STATUS"
        done

        # Check the command output
        OUTPUT=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardOutputContent" \
          --output text)
        ERROR=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardErrorContent" \
          --output text)

        echo "Command Output:"
        echo "$OUTPUT"
        if [ -n "$ERROR" ]; then
          echo "Command Error:"
          echo "$ERROR"
          exit 1
        fi

        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2 via SSM
      run: |
        # Send command to EC2 instance via SSM
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["cd /home/ec2-user/ai-mock-interview-v1","docker-compose pull","docker-compose up -d --remove-orphans","docker system prune -f"]}' \
          --query "Command.CommandId" \
          --output text)

        # Wait for the command to complete
        echo "Waiting for command $COMMAND_ID to complete..."
        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ] || [ "$STATUS" == "Pending" ]; do
          sleep 5
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Status" \
            --output text)
          echo "Command status: $STATUS"
        done

        # Check the command output
        OUTPUT=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardOutputContent" \
          --output text)
        ERROR=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardErrorContent" \
          --output text)

        echo "Command Output:"
        echo "$OUTPUT"
        if [ -n "$ERROR" ]; then
          echo "Command Error:"
          echo "$ERROR"
          exit 1
        fi

        # Check the final status
        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}