name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2 via SSM
      run: |
        # Send command to EC2 instance via SSM
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["cd /home/ec2-user/ai-mock-interview","git pull origin main || echo \"Failed to pull latest code, continuing...\"","docker-compose pull","docker-compose up -d --remove-orphans","docker system prune -f"]}' \
          --query "Command.CommandId" \
          --output text)

        # Wait for the command to complete
        echo "Waiting for command $COMMAND_ID to complete..."
        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ] || [ "$STATUS" == "Pending" ]; do
          sleep 5
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Status" \
            --output text)
          echo "Command status: $STATUS"
        done

        # Check the command output
        OUTPUT=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardOutputContent" \
          --output text)
        ERROR=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query "StandardErrorContent" \
          --output text)

        echo "Command Output:"
        echo "$OUTPUT"
        if [ -n "$ERROR" ]; then
          echo "Command Error:"
          echo "$ERROR"
          exit 1
        fi

        # Check the final status
        if [ "$STATUS" != "Success" ]; then
          echo "Command failed with status: $STATUS"
          exit 1
        fi
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}